// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NotificationService.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NotificationService.Migrations
{
    [DbContext(typeof(NotificationDbContext))]
    partial class NotificationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NotificationService.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("MaxRetries")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("integer");

                    b.Property<string>("RelatedEntityType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("TemplateData")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Priority");

                    b.HasIndex("ScheduledAt");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.HasIndex("RelatedEntityType", "RelatedEntityId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("NotificationService.Models.NotificationTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Variables")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("Type");

                    b.ToTable("NotificationTemplates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "Dear {CustomerName},\n\nYour order #{OrderId} has been confirmed.\nTotal Amount: {TotalAmount}\n\nThank you for your business!",
                            Code = "ORDER_CONFIRMATION",
                            CreatedAt = new DateTime(2025, 5, 29, 13, 16, 36, 690, DateTimeKind.Utc).AddTicks(3740),
                            Description = "Email sent when an order is confirmed",
                            IsActive = true,
                            Name = "Order Confirmation",
                            Subject = "Order Confirmation - #{OrderId}",
                            Type = 1,
                            Variables = "[\"CustomerName\", \"OrderId\", \"TotalAmount\"]"
                        },
                        new
                        {
                            Id = 2,
                            Body = "Alert: Product {ProductName} (SKU: {ProductSku}) is running low.\nCurrent Stock: {CurrentStock}\nMinimum Threshold: {MinimumThreshold}",
                            Code = "LOW_INVENTORY_ALERT",
                            CreatedAt = new DateTime(2025, 5, 29, 13, 16, 36, 690, DateTimeKind.Utc).AddTicks(3745),
                            Description = "Email sent when inventory is below threshold",
                            IsActive = true,
                            Name = "Low Inventory Alert",
                            Subject = "Low Inventory Alert - {ProductName}",
                            Type = 1,
                            Variables = "[\"ProductName\", \"ProductSku\", \"CurrentStock\", \"MinimumThreshold\"]"
                        },
                        new
                        {
                            Id = 3,
                            Body = "Your order #{OrderId} has been shipped. Tracking: {TrackingNumber}",
                            Code = "ORDER_SHIPPED",
                            CreatedAt = new DateTime(2025, 5, 29, 13, 16, 36, 690, DateTimeKind.Utc).AddTicks(3746),
                            Description = "SMS sent when an order is shipped",
                            IsActive = true,
                            Name = "Order Shipped",
                            Subject = "Order Shipped",
                            Type = 2,
                            Variables = "[\"OrderId\", \"TrackingNumber\"]"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
